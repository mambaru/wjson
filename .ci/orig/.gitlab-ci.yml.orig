variables:
  RELEASE_BRANCH: 'release-0.7'
  PROJECT_SSH: "git@github.lan:${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git"
  REMOTE_SSH:  "git@github.com:mambaru/${CI_PROJECT_NAME}.git"
  DEVEL_DENY: "false"

# master
# release-0.7
# pre-release
# devel
# wip-devel

before_script:
  - export LC_ALL='ru_RU.UTF-8'
  - export LANG='ru_RU.UTF-8'
  - export RELEASE_BRANCH="$(python3 ./.ci/wamba-ci.py get release release-0.7)"
  - echo "RELEASE_BRANCH=${RELEASE_BRANCH}"
  - git checkout ${CI_COMMIT_REF_NAME}
  - git pull ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}
  - git submodule deinit --force .
  - git submodule sync
  - git submodule update --init

stages:
  - build
  - check
  - merge
  - clean
  - publish
  - deploy
  
  
night-build:
  stage: build
  script:
    - git pull origin devel
    - git pull origin wip-devel
    - git submodule foreach git pull origin master
    - git add .
    - if git commit -am "night build all submodules update autocommit"; then
    -   echo "Submodules Update Succeed!!"
    -   git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:wip-devel
    - fi
  only:
    - night-build

main-build:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 11 
  only:
    - devel
    - wip-devel
    - pre-release
    - /^build.*$/
    - /^devel-.*$/
    - /^hotfix-.*$/

build-g++11:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 11 Debug
  only:
    - /^build.*$/
    - pre-release

build-g++14:
  stage: build
  script:
    - ./.ci/build-and-test.sh g++ 14 Release
    - ./.ci/build-and-test.sh g++ 14 Debug
  only:
    - /^build.*$/
    - pre-release

build-clang++11:
  stage: build
  script:
    - ./.ci/build-and-test.sh clang++ 11 Release
    - ./.ci/build-and-test.sh clang++ 11 Debug
  only:
    - /^build.*$/
    - pre-release

build-clang++14:
  stage: build
  script:
    - ./.ci/build-and-test.sh clang++ 14 Release
    - ./.ci/build-and-test.sh clang++ 14 Debug
  only:
    - /^build.*$/
    - pre-release

#
# ###########################################
# 

cppcheck:
  stage: check
  script:
    - ./.ci/cppcheck-ci.sh --std=c++11
    - ./.ci/cppcheck-ci.sh --std=c++14
  only:
    - /^check.*$/
    - pre-release
    
#
# ###########################################
# 

devel-wip:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL}  
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh devel false
  only:
    - wip-devel

devel-any:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL}  
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN}
    - ./.ci/automr.sh devel true
  only:
    - /^devel-.*$/
    
pre-release:
  stage: merge
  script:
    - echo git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:pre-release
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:pre-release
  only:
    - devel

master-release:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL} 
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh master false
  only:
    - pre-release

master-hotfix:
  stage: merge
  script:
    - export HOST=${CI_PROJECT_URL}  
    - export CI_PROJECT_ID=${CI_PROJECT_ID} 
    - export GITLAB_USER_ID=${GITLAB_USER_ID} 
    - export PRIVATE_TOKEN=${PRIVATE_TOKEN} 
    - ./.ci/automr.sh master true
  only:
    - /^hotfix-.*$/

release:
  stage: merge
  script:
    - echo "RELEASE_BRANCH=${RELEASE_BRANCH}"
    - git push ${PROJECT_SSH} ${CI_COMMIT_REF_NAME}:${RELEASE_BRANCH}
  only:
    - master
    
deploy:
  stage: deploy
  artifacts:
    paths:
      - "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-static-Release-production.tar.gz"
      - "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-static-RelWithDebInfo-loads.tar.gz"
      - "${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-static-Debug-devel.tar.gz"
    expire_in: 1 week
  script:
    - if [ -d wfcroot ]; then
    -   ./.ci/build-and-deploy.sh Release static
    -   ./.ci/build-and-deploy.sh Release shared
    -   ./.ci/build-and-deploy.sh Debug static
    -   ./.ci/build-and-deploy.sh Debug shared
    -   ./.ci/build-and-deploy.sh RelWithDebInfo static
    -   ./.ci/build-and-deploy.sh RelWithDebInfo shared
    - fi
  only:
    - tags
    - /^release-.*$/

delete-branches:
  stage: clean
  script:
    - git push ${PROJECT_SSH} :${CI_COMMIT_REF_NAME}
  only:
    - /^build.*$/
    - /^check.*$/
    
push-to-github:
  stage: publish
  only:
    - master
  script:
    - if [[ "$(python3 ./.ci/wamba-ci.py enabled public)" == "1" ]]; then
    -   git branch -f mambaru
    -   git checkout mambaru
    -   git submodule deinit -f .
    -   rm -rf .git/modules
    -   git rm -rf external
    -   git rm .gitlab-ci.yml
    -   git rm wamba-ci.json
    -   git submodule add --force https://github.com/mambaru/cmake-ci.git external/cmake-ci
    -   git commit -m "autocommit github.com export"
    -   git push -f ${REMOTE_SSH} mambaru
    -   git push -f --tags ${REMOTE_SSH} mambaru
    -   doxygen
    -   cd docs/html
    -   git init 
    -   git add .
    -   git commit -m "doxygen"
    -   git push -f ${REMOTE_SSH} master:gh-pages
    - fi
